{"version":3,"sources":["logo.svg","components/GameV2.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialBuildings","name","income","time","last_clicked","canStart","time_left","automated","GameV2","useState","cash","setCash","buildings","setBuildings","Array","length","fill","progressBars","setProgressBars","previous_timestamp","partial_ticks","progressCopy","gameLoop","timestamp","time_difference","forEach","e","index","difference","console","log","Math","ceil","buildingsCopy","performance","now","requestAnimationFrame","useEffect","anim","cancelAnimationFrame","className","map","key","round","value","text","styles","buildStyles","textSize","pathTransition","Button","onClick","id","handleProgressClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3340460d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect, useReducer, useRef } from \"react\";\r\n\r\nimport { Progress } from \"semantic-ui-react\";\r\nimport { request } from \"https\";\r\n\r\nimport { CircularProgressbar,buildStyles  } from \"react-circular-progressbar\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\n\r\nimport { Button, ProgressBar } from \"react-bootstrap\";\r\n\r\nconst INITAL_CASH = 0;\r\n\r\nconst initialBuildings = [\r\n  {\r\n    name: \"misc 1\",\r\n    income: 5,\r\n    time: 2500,\r\n    last_clicked: null,\r\n    canStart: true,\r\n    time_left: null,\r\n    automated: false\r\n  },\r\n  {\r\n    name: \"misc 2\",\r\n    income: 20,\r\n    time: 5000,\r\n    last_clicked: null,\r\n    canStart: true,\r\n    time_left: null,\r\n    automated: true\r\n  },\r\n  {\r\n    name: \"misc 3\",\r\n    income: 100,\r\n    time: 10000,\r\n    last_clicked: null,\r\n    canStart: true,\r\n    time_left: null,\r\n    automated: true\r\n  },\r\n  {\r\n    name: \"misc 4\",\r\n    income: 200,\r\n    time: 20000,\r\n    last_clicked: null,\r\n    canStart: true,\r\n    time_left: null,\r\n    automated: true\r\n  },\r\n  {\r\n    name: \"misc 5\",\r\n    income: 500,\r\n    time: 30000,\r\n    last_clicked: null,\r\n    canStart: true,\r\n    time_left: null,\r\n    automated: true\r\n  },\r\n  {\r\n    name: \"misc 6\",\r\n    income: 50000,\r\n    time: 60000,\r\n    last_clicked: null,\r\n    canStart: true,\r\n    time_left: null,\r\n    automated: true\r\n  }\r\n];\r\n\r\nconst initProgressBarState = () => {};\r\n\r\nexport default function GameV2() {\r\n  const [cash, setCash] = useState(INITAL_CASH);\r\n  const [buildings, setBuildings] = useState(initialBuildings);\r\n\r\n  const [progressBars, setProgressBars] = useState(\r\n    new Array(buildings.length).fill(0)\r\n  );\r\n\r\n  let counter = 0;\r\n  let previous_timestamp = 0;\r\n  let total_time = 0;\r\n  let partial_ticks = 0;\r\n  let update_rate = 20;\r\n  let progressCopy = [0, 0];\r\n\r\n  function gameLoop(timestamp) {\r\n    let time_difference = timestamp - previous_timestamp;\r\n    previous_timestamp = timestamp;\r\n    total_time += time_difference;\r\n    partial_ticks += time_difference;\r\n\r\n    if (partial_ticks > update_rate) {\r\n      buildings.forEach((e, index) => {\r\n        const difference = timestamp - e.last_clicked;\r\n        if (difference < e.time && !e.canStart) {\r\n          // console.log(\r\n          //   `Should update ${e.name} because time diff ${difference} < ${e.time}`\r\n          // );\r\n\r\n          console.log(`Updating to ${Math.ceil((difference * 100) / e.time)}`);\r\n          // console.log(`Diff: ${difference}, time: ${e.time} `);\r\n\r\n          progressCopy[index] = Math.ceil((difference * 100) / e.time);\r\n        } else if (difference > e.time && !e.canStart) {\r\n          // console.log(\r\n          //   `Should not update building because time diff ${difference} > ${e.time} `\r\n          // );\r\n\r\n          if (e.automated) {\r\n            progressCopy[index] = 0;\r\n            setCash(cash => cash + e.income);\r\n            let buildingsCopy = [...buildings];\r\n            buildingsCopy[index].last_clicked = performance.now();\r\n            buildingsCopy[index].canStart = false;\r\n            setBuildings(buildingsCopy);\r\n          } else {\r\n            console.log(\"resetting: \" + e.name);\r\n            progressCopy[index] = 0;\r\n            let buildingsCopy = [...buildings];\r\n            buildingsCopy[index].canStart = true;\r\n            setBuildings(buildingsCopy);\r\n            setCash(cash => cash + e.income);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // set state periodically\r\n    if (partial_ticks > update_rate) {\r\n      // console.log(\r\n      //   `ðŸ˜‚ðŸ˜‚ðŸ˜‚ðŸ˜‚ðŸ˜‚ðŸ˜‚ðŸ˜‚ to ${progressCopy} because ${partial_ticks} > ${update_rate}`\r\n      // );\r\n      let buildingsCopy = [...buildings];\r\n      buildingsCopy.forEach((e, index) => {\r\n        if (!e.canStart) {\r\n          const difference = timestamp - e.last_clicked;\r\n          buildingsCopy[index].time_left = e.time - difference;\r\n        } else {\r\n          buildingsCopy[index].time_left = 0;\r\n        }\r\n      });\r\n\r\n      setBuildings(buildingsCopy);\r\n      console.log(`ðŸ˜‚`);\r\n      setProgressBars([...progressCopy]);\r\n      // resetProgress();\r\n      partial_ticks = 0;\r\n    } else {\r\n      partial_ticks++;\r\n    }\r\n\r\n    counter += 1;\r\n\r\n    // let anim = requestAnimationFrame(gameLoop);\r\n    requestAnimationFrame(gameLoop);\r\n  }\r\n\r\n  function scaleSpeed() {\r\n    let buildingsCopy = [...buildings];\r\n    buildings.forEach((e, index) => {\r\n      if (e.time > 800) {\r\n        e.time -= 800;\r\n      } else if (e.time > 100) {\r\n        e.time -= 100;\r\n      }\r\n    });\r\n\r\n    setBuildings(buildingsCopy);\r\n  }\r\n\r\n  // modify the building state to add a timestamp and remove the button temporarily\r\n  function handleProgressClick(id) {\r\n    let buildingsCopy = [...buildings];\r\n    buildingsCopy[id].canStart = false;\r\n    buildingsCopy[id].last_clicked = performance.now();\r\n    setBuildings(buildingsCopy);\r\n  }\r\n\r\n  // start gameloop once at mount time\r\n  useEffect(() => {\r\n    console.log(\"Starting gameloop...\");\r\n    let anim = requestAnimationFrame(gameLoop);\r\n    return () => cancelAnimationFrame(anim);\r\n  }, []); // retrigger function call when the state value changes\r\n\r\n  return (\r\n    <div className=\"container mt-4\">\r\n      <span>Cash: {cash}</span>\r\n      <div className=\"all-progress-container\">\r\n      {buildings.map((e, index) => (\r\n        <div key={index} className=\"progress-container m-2 w-25 h-25\">\r\n          \r\n          <span>{Math.round(e.income / (e.time/1000)) }/s</span>\r\n          {/* <ProgressBar\r\n            className=\"m-2 w-100\"\r\n            now={progressBars[index]}\r\n            animated\r\n            variant=\"success\"\r\n            label={`${Math.ceil(e.time_left / 1000)}s`}\r\n          /> */}\r\n          <CircularProgressbar\r\n            className=\"w-100\"\r\n            value={progressBars[index]}\r\n            text={`${Math.ceil(e.time_left / 1000)}s, ${Math.ceil(e.time_left*100 / e.time) == 0 ? 0 :  100 - Math.ceil(e.time_left*100 / e.time)}%`}\r\n            styles={buildStyles({\r\n              // Rotation of path and trail, in number of turns (0-1)\r\n\r\n              // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\r\n\r\n              // Text size\r\n              textSize: \"14px\",\r\n\r\n              // How long animation takes to go from one percentage to another, in seconds\r\n              pathTransition: 'stroke-dashoffset 0.1s ease 0s',\r\n            })}\r\n          />\r\n          {e.canStart ? (\r\n            <Button\r\n              className=\"fade-in m-2\"\r\n              onClick={() => handleProgressClick(index)}\r\n            >\r\n              ${e.income} in {e.time/1000}s\r\n            </Button>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n      ))}\r\n      </div>\r\n\r\n      <button onClick={scaleSpeed}>Scale speed + </button>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n// import Game from './components/Game';\nimport GameV2 from './components/GameV2';\n\nfunction App() {\n  return (\n    <GameV2></GameV2>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>\n  <App></App>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}