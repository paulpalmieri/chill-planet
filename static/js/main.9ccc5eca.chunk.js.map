{"version":3,"sources":["assets/NODE_GOLD.png","logo.svg","components/ProgressBar.js","components/GameV3.js","App.js","serviceWorker.js","index.js","assets/NODE_IRON.png"],"names":["module","exports","ProgressBar","props","bgcolor","completed","fillerStyles","height","width","backgroundColor","borderRadius","textAlign","transition","animationDirection","style","opacity","animation","color","fontWeight","MainContainer","styled","div","CashDisplay","ContainerFlex","InfoContainer","StatsContainer","SingleStatContainer","ImageContainer","img","NODE_TYPES","IRON","name","png","node_iron_png","completetime","lifespan","yield","GOLD","node_gold_png","performance","now","GameV3","useState","money","previous_timestamp","setPrevioustimstamp","partial_ticks","setPartialticks","gameloop","React","useRef","nodes","setNodes","useEffect","console","log","requestAnimationFrame","current","timestamp","time_difference","nodesCopy","_","cloneDeep","orderBy","o","remaining","forEach","n","index","difference","last_tick","progress","isVisible","splice","onClick","randomNum","Math","floor","random","newNode","Object","keys","workers","map","i","key","initial","x","duration","animate","exit","node","NodeTitle","NodeContainer","src","ceil","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9ccc5eca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/NODE_GOLD.fed64b38.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nconst ProgressBar = (props) => {\r\n    const { bgcolor, completed } = props;\r\n  \r\n    const containerStyles = {\r\n      height: 20,\r\n      width: '100%',\r\n      backgroundColor: \"#e0e0de\",\r\n      borderRadius: 50,\r\n      opacity: 1,\r\n      animation: \"fade 2s linear\",\r\n    }\r\n  \r\n    const fillerStyles = {\r\n      height: '100%',\r\n      width: `${completed}%`,\r\n      backgroundColor: bgcolor,\r\n      borderRadius: 'inherit',\r\n      textAlign: 'center',\r\n      transition: 'width 0.15s',\r\n      animationDirection: 'alternate',\r\n    }\r\n  \r\n    const labelStyles = {\r\n      // padding: 5,\r\n      color: 'white',\r\n      fontWeight: 'bold'\r\n    }\r\n  \r\n    return (\r\n\r\n      <div style={containerStyles}>\r\n        <div style={fillerStyles}>\r\n          <span style={labelStyles}>{`${completed}%`}</span>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default ProgressBar;\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport _ from \"lodash\";\r\n\r\nimport ProgressBar from \"./ProgressBar\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\n\r\nimport node_iron_png from \"../assets/NODE_IRON.png\";\r\nimport node_gold_png from \"../assets/NODE_GOLD.png\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst variants = {\r\n  visible: { opacity: 1 },\r\n  hidden: { opacity: 0 }\r\n};\r\n\r\nconst MainContainer = styled.div`\r\n  display: flex;\r\n  /* width: 50%; */\r\n  align-items: center;\r\n  flex-direction: column;\r\n  /* justify-content: center; */\r\n`;\r\n\r\nconst CashDisplay = styled.div`\r\n  color: #55ce7e;\r\n  font-size: 18px;\r\n`;\r\n\r\nconst ContainerFlex = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  width: 100%;\r\n  padding: 12px;\r\n  margin: 4px;\r\n  align-items: center;\r\n  background-color: #f8f8f8;\r\n`;\r\n\r\nconst InfoContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n`;\r\n\r\nconst StatsContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: flex-start;\r\n  width: 100%;\r\n\r\n  label {\r\n    color: #adadad;\r\n  }\r\n\r\n  div {\r\n    margin-right: 30px;\r\n  }\r\n`;\r\n\r\nconst SingleStatContainer = styled.div``;\r\n\r\nconst ImageContainer = styled.img`\r\n  /* margin-left: 20px; */\r\n  margin-right: 12px;\r\n`;\r\n\r\nconst NODE_TYPES = {\r\n  IRON: {\r\n    name: \"Iron ore\",\r\n    png: node_iron_png,\r\n    completetime: 3 * 1000,\r\n    lifespan: 2,\r\n    yield: 1,\r\n    color: \"#80778E\"\r\n  },\r\n  GOLD: {\r\n    name: \"Gold ore\",\r\n    png: node_gold_png,\r\n    completetime: 5000,\r\n    lifespan: 3,\r\n    yield: 1,\r\n    color: \"#E19055\"\r\n  }\r\n};\r\n\r\nconst initialNodes = [\r\n  {\r\n    name: \"Iron ore\",\r\n    png: node_iron_png,\r\n    completetime: 6 * 1000,\r\n    lifespan: 100,\r\n    yield: 1,\r\n    workers: 1,\r\n    remaining: 100,\r\n    progress: 0,\r\n    last_tick: performance.now(),\r\n    isVisible: true\r\n  },\r\n  {\r\n    name: \"Iron ore\",\r\n    png: node_iron_png,\r\n    completetime: 8 * 1000,\r\n    lifespan: 100,\r\n    yield: 1,\r\n    workers: 1,\r\n    remaining: 100,\r\n    progress: 0,\r\n    last_tick: performance.now(),\r\n    isVisible: true\r\n  }\r\n];\r\n\r\nexport default function GameV3() {\r\n  const [money, setMoney] = useState(1000);\r\n  const [previous_timestamp, setPrevioustimstamp] = useState(0);\r\n  const [partial_ticks, setPartialticks] = useState(0);\r\n\r\n  let gameloop = React.useRef();\r\n  const [nodes, setNodes] = useState([]);\r\n  const [emptyNodes, setEmptyNodes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"Starting gameloop...\");\r\n    // console.log(nodes);\r\n\r\n    let anim = requestAnimationFrame(gameloop.current);\r\n    console.log(\"Animation loop\");\r\n  }, []); // retrigger function call when the state value changes\r\n\r\n  // let previous_timestamp;\r\n  // let partial_ticks = 0;\r\n  const update_rate = 150;\r\n\r\n  gameloop.current = function(timestamp) {\r\n    console.log(`Timestamp: ${timestamp}`);\r\n\r\n    let time_difference = timestamp - previous_timestamp;\r\n\r\n    console.log(`Time diff between calls: ${time_difference}`);\r\n    setPrevioustimstamp(timestamp);\r\n\r\n    console.log(`Previous timestamp: ${previous_timestamp}`);\r\n    setPartialticks(partial_ticks => partial_ticks + time_difference);\r\n    // partial_ticks += time_difference;\r\n\r\n    if (partial_ticks > update_rate) {\r\n      console.log(\r\n        `Entering condition with ptick: ${partial_ticks} and ${update_rate}`\r\n      );\r\n      // const nodesCopy = [...nodes];\r\n      // console.log(nodesCopy);\r\n      const nodesCopy = _.cloneDeep(\r\n        _.orderBy(nodes, o => o.remaining, [\"desc\"])\r\n      );\r\n\r\n      nodesCopy.forEach((n, index) => {\r\n        const difference = timestamp - n.last_tick;\r\n        console.log(`Diff: ${difference} for node ${index}`);\r\n        if (difference < n.completetime) {\r\n          console.log(`Node ${index} updating.`);\r\n          // not yet yielded\r\n          n.progress = (difference * 100) / n.completetime;\r\n\r\n          //   node.last_tick = performance.now();\r\n        } else {\r\n          // yield\r\n          console.log(`Node ${index} done.`);\r\n          n.remaining -= n.yield;\r\n\r\n          // const OrderedCopy = _.orderBy(nodesCopy, o => o.remaining, ['desc']);\r\n\r\n          if (n.remaining === 0 || n.remaining < 0) {\r\n            n.isVisible = false;\r\n\r\n            nodesCopy.splice(index, 1);\r\n          } else {\r\n            n.progress = 0;\r\n            n.last_tick = performance.now();\r\n          }\r\n        }\r\n      });\r\n\r\n      // console.log('should update')\r\n      setNodes([...nodesCopy]);\r\n      console.log(`Partial ticks before end of tick: ${partial_ticks}`);\r\n      // partial_ticks -= update_rate;\r\n\r\n      setPartialticks(partial_ticks => partial_ticks - update_rate);\r\n\r\n      console.log(`Partial ticks after end of tick: ${partial_ticks}`);\r\n      // console.log(partial_ticks);\r\n    }\r\n\r\n    setNodes(nodesCopy => [...nodesCopy]);\r\n\r\n    // console.log(`Money inside gameloop: ${money}`);\r\n\r\n    requestAnimationFrame(gameloop.current);\r\n  };\r\n\r\n  function spawnNode() {\r\n    let nodesCopy = _.cloneDeep(nodes);\r\n    console.log(\"Spawning new node...\");\r\n    let randomNum = Math.floor(Math.random() * 2);\r\n    // let randomNum = 1;\r\n    let newNode = NODE_TYPES[Object.keys(NODE_TYPES)[randomNum]];\r\n    newNode.workers = 1;\r\n    newNode.remaining = newNode.lifespan;\r\n    newNode.progress = 0;\r\n    newNode.isVisible = true;\r\n    newNode.last_tick = performance.now();\r\n\r\n    setNodes([...nodesCopy, newNode]);\r\n    console.log(`Spawned new node`);\r\n  }\r\n\r\n  // requestAnimationFrame(gameLoop);\r\n  return (\r\n    <MainContainer>\r\n      <CashDisplay>$ {money}</CashDisplay>\r\n\r\n      <button onClick={spawnNode}>Spawn</button>\r\n\r\n      <AnimatePresence>\r\n        {nodes.map((n, i) => (\r\n            <motion.div\r\n              key={i}\r\n              initial={{\r\n                opacity: 0.5,\r\n                x: -50\r\n              }}\r\n              transition={{ duration: 1 }}\r\n              animate={{ opacity: 1, x: 0 }}\r\n              exit={{ opacity: 0, x: 50 }}\r\n            >\r\n              <NodeContainer index={i} node={n}></NodeContainer>\r\n            </motion.div>\r\n\r\n          // <motion.div key={index} initial={{\r\n          //   opacity: 0\r\n          // }}\r\n          // transition={{ duration: 2 }}\r\n          // animate={node.isVisible ? \"visible\" : \"hidden\"} variants={variants} exit={{opacity: 0}}>\r\n          //   <div>Name: {node.name} </div>\r\n          //   <div>Workers: {node.workers} </div>\r\n          //   <div>Lifespan: {node.lifespan} </div>\r\n          //   <div>Remaining: {node.remaining} </div>\r\n          //   <div>Yield: {node.yield} </div>\r\n\r\n          //   <img height={32} src={node.png}></img>\r\n          //   <ProgressBar\r\n          //     key={index}\r\n          //     bgcolor=\"#6a1b9a\"\r\n          //     completed={Math.ceil(node.progress)}\r\n          //     ></ProgressBar>\r\n          // </motion.div>\r\n        ))}\r\n      </AnimatePresence>\r\n    </MainContainer>\r\n  );\r\n}\r\n\r\nconst NodeTitle = styled.div`\r\n  color: ${props => props.color};\r\n  font-weight: bold;\r\n`;\r\nconst NodeContainer = props => {\r\n  return (\r\n    <ContainerFlex>\r\n      <ImageContainer height={64} src={props.node.png}></ImageContainer>\r\n\r\n      <InfoContainer>\r\n        <NodeTitle color={props.node.color}>{props.node.name} </NodeTitle>\r\n        <StatsContainer>\r\n          <SingleStatContainer>\r\n            <div>{props.node.workers} </div>\r\n            <label>Workers</label>\r\n          </SingleStatContainer>\r\n          <SingleStatContainer>\r\n            <div>{props.node.lifespan} </div>\r\n            <label>Lifespan</label>\r\n          </SingleStatContainer>\r\n          <SingleStatContainer>\r\n            <div>{props.node.remaining} </div>\r\n            <label>Remaining</label>\r\n          </SingleStatContainer>\r\n          <SingleStatContainer>\r\n            <div>{props.node.yield} </div>\r\n            <label>Yield</label>\r\n          </SingleStatContainer>\r\n        </StatsContainer>\r\n\r\n        <ProgressBar\r\n          key={props.index}\r\n          bgcolor={props.node.color}\r\n          completed={Math.ceil(props.node.progress)}\r\n        ></ProgressBar>\r\n      </InfoContainer>\r\n    </ContainerFlex>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\n// import Game from './components/Game';\r\nimport GameV3 from './components/GameV3';\r\n\r\nfunction App() {\r\n  return (\r\n    <GameV3></GameV3>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App> </App>\r\n  </React.StrictMode>\r\n  // <App>\r\n  //   test\r\n  // </App>\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/NODE_IRON.cdce107f.png\";"],"sourceRoot":""}