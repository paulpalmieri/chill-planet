{"version":3,"sources":["logo.svg","components/BuildingCard.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BuildingCard","props","className","key","id","name","owned","cost","warning","onClick","buyBuilding","GameContainer","styled","div","CashTextDisplay","h2","PositiveTextDisplay","h3","NegativeTextDisplay","buildingsList","h1","income","Game","useState","positiveNum","negativeNum","chillCount","setChillCount","cashNum","setCashNum","setLevelCompleted","buildingsState","setBuilding","updateChillCount","setTimeout","updateCashCount","cashIncrease","forEach","element","handleBuyBuilding","a","console","log","buildingsCopy","costIncrease","Math","ceil","pow","table","useEffect","map","e","index","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.602e4f71.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState, useEffect, useReducer} from 'react';\r\n\r\n\r\n\r\nexport default function BuildingCard(props) {\r\n\r\n    return(\r\n        <div className=\"container w-100 p-2 flex-column d-flex mt-2 border\" key={props.id}>\r\n            <h5>{props.name}  </h5>\r\n            <h6>Owned: {props.owned}  </h6>\r\n            <h6>Cost: {props.cost}  </h6>\r\n            <button className={props.warning ? 'btn btn-danger' : 'btn btn-primary'} onClick={() => props.buyBuilding(props.id, 1)}>BUY 1</button>\r\n\r\n            {/* {console.log(`Rendering building ${props.id}`)} */}\r\n        </div>\r\n\r\n    );\r\n}","import React, {useState, useEffect, useReducer} from 'react';\r\n\r\nimport BuildingCard from './BuildingCard';\r\n\r\nimport styled from 'styled-components';\r\n\r\nconst TICK_RATE = 1000/10;\r\n\r\nconst GameContainer = styled.div`\r\n    font-size: 34px;\r\n    height: 600px;\r\n    margin: 10px;\r\n    display: flex;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    /* justify-content: center; */\r\n`;\r\n\r\nconst CashTextDisplay = styled.h2`\r\n    color: green;\r\n`;\r\n\r\nconst PositiveTextDisplay = styled.h3`\r\n    color: lightgreen;\r\n`;\r\n\r\nconst NegativeTextDisplay = styled.h3`\r\n    color: red;\r\n`;\r\n\r\nconst ChillCountDisplay = styled.h1`\r\n    color: blue;\r\n`;\r\n\r\nconst buildingsList =[\r\n    {\r\n        name: 'Tea',\r\n        cost: 100,\r\n        owned: 0,\r\n        income: 1,\r\n    },\r\n    {\r\n        name: 'Coffee',\r\n        cost: 1000,\r\n        owned: 0,\r\n        income: 5,\r\n    },\r\n    {\r\n        name: 'Beer',\r\n        cost: 10000,\r\n        owned: 0,\r\n        income: 15,\r\n    },\r\n    {\r\n        name: 'Vodka',\r\n        cost: 100000,\r\n        owned: 0,\r\n        income: 30,\r\n    },\r\n    {\r\n        name: 'Absinthe',\r\n        cost: 1000000,\r\n        owned: 0,\r\n        income: 60,\r\n    },\r\n\r\n];\r\n\r\n\r\nexport default function Game() {\r\n    const [positiveNum, setPositiveNum] = useState(1);\r\n    const [negativeNum, setNegativeNum] = useState(0);\r\n    const [chillCount, setChillCount] = useState(1000);\r\n    const [cashNum, setCashNum] = useState(1000);\r\n    const [levelCompleted, setLevelCompleted] = useState(false);\r\n    const [buildingsState, setBuilding] = useState(buildingsList);\r\n\r\n\r\n\r\n    function updateChillCount() {\r\n        if(positiveNum > negativeNum && chillCount > 0) {\r\n            setChillCount((chillCount) => chillCount - 1);\r\n        } else if (chillCount === 0) {\r\n            setLevelCompleted(true);\r\n        }\r\n        \r\n\r\n        setTimeout(\r\n            updateChillCount, TICK_RATE);\r\n    }\r\n\r\n    function updateCashCount() {\r\n        let cashIncrease = 0;\r\n        buildingsState.forEach(element => {\r\n            cashIncrease += element.owned*element.income;\r\n        });\r\n\r\n\r\n\r\n        // console.log(cashIncrease);\r\n        setCashNum((cashNum) => cashNum + cashIncrease);\r\n\r\n        setTimeout(\r\n            updateCashCount, TICK_RATE);\r\n    }\r\n\r\n\r\n    async function handleBuyBuilding(id) {\r\n        // TODO: check cash against rising cost changes. \r\n        if(cashNum > buildingsState[id].cost) {\r\n\r\n            console.log(`Buying 1 of building ${id}`)\r\n\r\n            const buildingsCopy = [...buildingsState];\r\n\r\n            buildingsCopy[id].owned += 1;\r\n            // console.log(buildingsCopy[id].owned);\r\n\r\n            console.log(`Cost: ${buildingsState[id].cost}`)\r\n            console.log(`Cash: ${cashNum}`)\r\n\r\n\r\n            console.log(cashNum - buildingsState[id].cost);\r\n            setCashNum((cashNum) => cashNum - buildingsState[id].cost);\r\n\r\n            if(cashNum < 0) console.log('WTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF');\r\n\r\n            let costIncrease = Math.ceil(Math.pow(1.07, buildingsCopy[id].owned));\r\n            buildingsCopy[id].cost += costIncrease;\r\n\r\n            setBuilding(buildingsCopy);\r\n\r\n            console.table(buildingsCopy[id]);\r\n\r\n            // substract cash (pay)\r\n        } else {\r\n            // not enough cash\r\n            // make button red\r\n            console.log(`Noth enough cash to buy 1 of building ${id}`)\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        const interval = setTimeout(\r\n          updateChillCount, TICK_RATE);\r\n        const interval2 = setTimeout(\r\n          updateCashCount, TICK_RATE);\r\n\r\n        // return () => clearInterval(interval);\r\n      }, []);\r\n\r\n\r\n    //   useEffect(() => {\r\n    //     const interval = setTimeout(\r\n    //       updateChillCount, 2000);\r\n    //     // return () => clearInterval(interval);\r\n    //   }, []);\r\n\r\n    return(\r\n        <GameContainer className=\"main\">\r\n            {/* {levelCompleted ? <p>Level completed!</p> : ''} */}\r\n            <div className=\"main-banner\">\r\n                <span>Tot: {chillCount}</span>\r\n                <CashTextDisplay>Cash: {cashNum}</CashTextDisplay>\r\n            </div>\r\n            <div className=\"w-50\">\r\n                <div>\r\n                    <PositiveTextDisplay>Pos: {positiveNum}</PositiveTextDisplay>\r\n                </div>\r\n                <div>\r\n                    <NegativeTextDisplay>Neg: {negativeNum}</NegativeTextDisplay>\r\n                </div>\r\n                {buildingsState.map((e, index) => (\r\n\r\n                    <BuildingCard id={index} \r\n                                  name={e.name} \r\n                                  owned={e.owned} \r\n                                  cost={e.cost}\r\n                                  buyBuilding={handleBuyBuilding}\r\n                                  warning={!(cashNum > e.cost)}>\r\n                                  \r\n                    </BuildingCard>\r\n                ))}\r\n                \r\n            </div>\r\n\r\n        </GameContainer>\r\n    );\r\n}\r\n\r\n// const BuildingList = ({buildings, handleFunc}) => (\r\n//         <div>\r\n//         {buildings.map((e, index) => (\r\n                            \r\n//                             <div key={index}>\r\n//                             <p>{e.name}</p>\r\n//                             <p>Owned: {e.owned}</p>\r\n//                             <p>Cost: {e.cost}</p>\r\n//                             <button onClick={() => handleFunc(index, 1)}>BUY 1 NEWWWW</button>\r\n//                             {console.log(`Rendering building ${index}`)}\r\n\r\n//                         </div>\r\n//                         ))}\r\n//         </div>\r\n// );\r\n\r\n// const MemoBuilidingList = React.memo(BuildingList);\r\n\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Game from './components/Game';\n\nfunction App() {\n  return (\n    <Game></Game>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />\n  // </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}